import { AccountService } from '@money-app/account';
import { RabbitService } from '@money-app/rabbit';
import { TelegramService } from '@money-app/telegram';
import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';

import dayjs from 'dayjs';
// eslint-disable-next-line @nx/enforce-module-boundaries
import { ExtendSubscribeMenu, InfoCronMenu } from 'libs/telegram/src/lib/menu';

@Injectable()
export class CronService {
  private readonly logger = new Logger(CronService.name);
  constructor(
    private readonly telegramService: TelegramService,
    private readonly accountService: AccountService,
    private readonly rabbitService: RabbitService
  ) {}

  @Cron(CronExpression.EVERY_DAY_AT_10AM)
  // @Cron(CronExpression.EVERY_10_SECONDS)
  async getAccountsSubscribeTomorrow() {
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11 —á–∞—Å–æ–≤ –¥–Ω—è');
    // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞
    const tomorrow = dayjs().add(1, 'day').format('YYYY-MM-DD');
    const accounts = await this.accountService.getAccountsSubscribeTomorrow(
      tomorrow
    );
    if (accounts.length <= 0) {
      return;
    }
    const message = `–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!`;

    for (const account of accounts) {
      const chatId = account;
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑  sendMessageUsers c –∑–∞–¥–µ—Ä–∂–∫–æ–π 5 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        await this.telegramService.sendMessageUsers(
          chatId.toString(),
          message,
          ExtendSubscribeMenu
        );
      }, 5000);
    }
  }

  // @Cron(CronExpression.EVERY_10_SECONDS)
  @Cron(CronExpression.EVERY_DAY_AT_1PM)
  async getAccountsWithoutExpense() {
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 1 AT PM –£–í–ï–î–û–ú–õ–Ø–õ–ö–ê —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞');
    const accounts = await this.accountService.getAllAccountsId();
    // console.warn(accounts);
    if (!accounts) {
      return;
    }
    const transactionAccounts =
      await this.rabbitService.getAccountIdsWithTransactionsToday();
    // console.warn(transactionAccounts);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤ accounts, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ transactionAccounts
    const filteredAccounts = accounts.filter(
      (account) => !transactionAccounts.includes(account.id)
    );

    console.warn(filteredAccounts);
    const messages = [
      '–ü—Ä–∏–≤–µ—Ç! üåü –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å. –ü–æ–¥—Ä–æ–±–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –∏ –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! üí∞‚ú®',
      '–ü—Ä–∏–≤–µ—Ç! üåû –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –¥–µ–Ω—å –µ—â—ë —É—Å–ø–µ—à–Ω–µ–µ! –ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö. –ü—É—Å—Ç—å –≤–∞—à –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º! üí™üí∏',
      '–ü—Ä–∏–≤–µ—Ç! üöÄ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –±—ã—Å—Ç—Ä–µ–µ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üíºüí°',
      '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üíº –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —É—á–µ—Ç–∞ —Å–≤–æ–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π. –ü—É—Å—Ç—å –≤–∞—à –¥–µ–Ω—å –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –∏ —É—Å–ø–µ—à–Ω—ã–º! üí™üìà',
    ];

    const message = messages[Math.floor(Math.random() * messages.length)];
    for (const account of filteredAccounts) {
      const chatId = account.key;
      setTimeout(async () => {
        await this.telegramService.sendMessageUsers(
          chatId.toString(),
          message,
          InfoCronMenu
        );
      }, 5000);
    }
  }
}
