version: '3.8'
services:
  db:
    container_name: erist_opt-postgres
    build:
      context: .
      dockerfile: ./db/pg/Dockerfile.postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      TZ: Asia/Yekaterinburg
    volumes:
      - ./docker-data/postgres:/var/lib/postgresql/data
      - ./db/pg/erist_opt.sql:/docker-entrypoint-initdb.d/erist_opt.sql
    networks:
      - erist_opt-network
  mongo:
    image: mongo
    container_name: erist_opt-mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./docker-data/mongo-data:/data/db
      - ./db/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - erist_opt-network
  redis:
    image: redis:7
    restart: always
    container_name: erist_opt-redis
    command: redis-server --requirepass ${REDIS_PASS}
    volumes:
      - ./docker-data/redis:/var/lib/redis
    ports:
      - '6380:6379'
    networks:
      - erist_opt-network

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    container_name: 'erist_opt-rabbitmq'
    volumes:
      - ./docker-data/rabbitmq:/var/lib/rabbitmq/mnesia/
      - ./db/init-rabbitMQ/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./db/init-rabbitMQ/conf.d:/etc/rabbitmq/conf.d:ro
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_DEF_USER}
      - RABBITMQ_DEFAULT_PASS=${RMQ_DEF_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - erist_opt-network

  grafana:
    container_name: erist_opt-grafana
    build:
      context: .
      dockerfile: ./grafana/Dockerfile.grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${MINIO_ROOT_PASSWORD}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      REDIS_PASS: ${REDIS_PASS}
      TZ: Asia/Yekaterinburg
    networks:
      - erist_opt-network
    depends_on:
      - prometheus

  loki:
    container_name: erist_opt-loki
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - erist_opt-network

  minio:
    container_name: 'erist_opt-minio'
    restart: always
    image: minio/minio
    ports:
      - 9000:9000
      - 9011:9001
    volumes:
      - ./docker-data/minio_storage:/data
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      TZ: Asia/Yekaterinburg
    networks:
      - erist_opt-network

  kafkahq:
    image: tchiotludo/kafkahq
    restart: always
    ports:
      - '8081:8080'
    environment:
      KAFKAHQ_CONFIGURATION: |
        kafkahq:
          connections:
            erist_opt-cluster:
              properties:
                bootstrap.servers: "kafka:9092"
    links:
      - kafka
    networks:
      - erist_opt-network
  zookeeper:
    image: wurstmeister/zookeeper:latest
    restart: always
    ports:
      - '2181:2181'
    networks:
      - erist_opt-network
  kafka:
    image: wurstmeister/kafka:latest
    restart: always
    ports:
      - '9092:9092'
      - '29092:29092'
    expose:
      - '9093'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - erist_opt-network

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    restart: unless-stopped
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - erist_opt-network

  prometheus:
    container_name: erist_opt-prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - erist_opt-network
    depends_on:
      - cadvisor

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - erist_opt-network
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.4.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

volumes:
  elasticsearch-data:
    driver: local

networks:
  erist_opt-network:
    driver: bridge
