version: '3.8'
services:
  db:
    container_name: erist_opt-postgres
    build:
      context: .
      dockerfile: ./db/pg/Dockerfile.postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      TZ: Asia/Yekaterinburg
    volumes:
      - ./db/pg/erist_opt.sql:/docker-entrypoint-initdb.d/erist_opt-db-init.sql
    networks:
      - erist_opt-network
  redis:
    image: redis:7
    restart: always
    container_name: erist_opt-redis
    command: redis-server --requirepass ${REDIS_PASS}
    volumes:
      - ./docker-data/redis:/var/lib/redis
    ports:
      - 6380:6379
    networks:
      - erist_opt-network
  redis-dl:
    image: redis:7
    restart: always
    container_name: erist_opt-redis-dl
    command: redis-server --requirepass ${REDIS_PASS}
    volumes:
      - ./docker-data/redis:/var/lib/redis
    ports:
      - '127.0.0.1:6379:6379'
    networks:
      - erist_opt-network
  mongo:
    image: mongo
    container_name: erist_opt-mongo
    restart: always
    ports:
      - '127.0.0.1:27017:27017'
    volumes:
      - ./docker-data/mongo-data:/data/db
      - ./db/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - erist_opt-network
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    container_name: erist_opt-rabbitmq
    volumes:
      - ./docker-data/rabbitmq:/var/lib/rabbitmq/mnesia/
      - ./db/rabbitMQ/init-rabbitMQ/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./db/rabbitMQ/init-rabbitMQ/conf.d:/etc/rabbitmq/conf.d:ro
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_DEF_USER}
      - RABBITMQ_DEFAULT_PASS=${RMQ_DEF_PASS}
    ports:
      - '127.0.0.1:5672:5672'
      - 15672:15672
    networks:
      - erist_opt-network
  minio:
    container_name: erist_opt-minio
    restart: always
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./docker-data/minio_storage:/data
    command: server --console-address ":9001" /data
    environment:
      MINIO_BROWSER_UPLOAD_LIMIT: 10G
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    mem_limit: 12G
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - erist_opt-network
  grafana:
    container_name: erist_opt-grafana
    build:
      context: .
      dockerfile: ./grafana/Dockerfile.grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      REDIS_PASS: ${REDIS_PASS}
    depends_on:
      - prometheus
    networks:
      - erist_opt-network
  loki:
    container_name: erist_opt-loki
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    depends_on:
      - grafana
    networks:
      - erist_opt-network
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    restart: unless-stopped
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - erist_opt-network
  prometheus:
    image: prom/prometheus:latest
    container_name: erist_opt-prometheus
    volumes:
      - ./prometheus.qa.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - erist_opt-network
  kafkahq:
    image: tchiotludo/kafkahq
    restart: always
    ports:
      - '8081:8080'
    environment:
      KAFKAHQ_CONFIGURATION: |
        kafkahq:
          connections:
            erist_opt-cluster:
              properties:
                bootstrap.servers: "kafka:9092"
    links:
      - kafka
    networks:
      - erist_opt-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    restart: always
    ports:
      - '2181:2181'
    networks:
      - erist_opt-network
  kafka:
    container_name: erist_opt-kafka
    image: wurstmeister/kafka:latest
    restart: always
    ports:
      - '9092:9092'
      - '29092:29092'
    depends_on:
      - zookeeper
    expose:
      - '9093'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - erist_opt-network

  elasticsearch:
    image: elasticsearch:7.4.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - erist_opt-network
    restart: on-failure
  kibana:
    container_name: kibana
    image: kibana:7.4.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - erist_opt-network

  notifications-service:
    container_name: 'notifications-service'
    build:
      cache_from:
        - erist_opt-image:nx-base
      context: ./
      dockerfile: ./apps/notifications-service/Dockerfile
    image: notifications-service:nx-prod
    restart: on-failure
    environment:
      NODE_ENV: ${NODE_ENV}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      RMQ_URL: ${RMQ_URL}
      RMQ_QUEUE: ${RMQ_QUEUE}
      RMQ_DEF_USER: ${RMQ_DEF_USER}
      RMQ_DEF_PASS: ${RMQ_DEF_PASS}
      RMQ_QUEUE_LOCAL_RMQ: ${RMQ_QUEUE_LOCAL_RMQ}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE}
      PG_HOST: db
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      DB_SYNC: ${DB_SYNC}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      LOKI_HOST: ${LOKI_HOST}
      SEND_EMAIL_TO: ${SEND_EMAIL_TO}
      SEND_EMAIL: ${SEND_EMAIL}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
    networks:
      - erist_opt-network

  local-rmq:
    container_name: 'local-rmq'
    build:
      cache_from:
        - erist_opt-image:nx-base
      context: ./
      dockerfile: ./apps/local-rmq/Dockerfile
    image: local-rmq:nx-prod
    restart: on-failure
    environment:
      NODE_ENV: ${NODE_ENV}
      PG_HOST: db
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      DB_SYNC: ${DB_SYNC}
      RMQ_URL: ${RMQ_URL}
      RMQ_QUEUE: ${RMQ_QUEUE}
      RMQ_DEF_USER: ${RMQ_DEF_USER}
      RMQ_DEF_PASS: ${RMQ_DEF_PASS}
      RMQ_QUEUE_LOCAL_RMQ: ${RMQ_QUEUE_LOCAL_RMQ}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_EXTERNAL_HOST: ${MINIO_EXTERNAL_HOST}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      JWT_ACCESS_TOKEN_PUBLIC_KEY: ${JWT_ACCESS_TOKEN_PUBLIC_KEY}
      JWT_ACCESS_TOKEN_PUBLIC_KEY_CUSTOMER: ${JWT_ACCESS_TOKEN_PUBLIC_KEY_CUSTOMER}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE}
      LOKI_HOST: ${LOKI_HOST}

    networks:
      - erist_opt-network

  data-loader:
    container_name: 'data-loader'
    ports:
      - 3015:3015
    build:
      cache_from:
        - erist_opt-image:nx-base
      context: ./
      dockerfile: ./apps/data-loader/Dockerfile
    image: data-loader:nx-prod
    restart: on-failure
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 3015
      RMQ_URL: ${RMQ_URL}
      RMQ_QUEUE: ${RMQ_QUEUE}
      RMQ_QUEUE_ORDER: ${RMQ_QUEUE_ORDER}
      REDIS_HOST: redis-dl
      REDIS_PORT: 6379
      REDIS_PASS: ${REDIS_PASS}
    networks:
      - erist_opt-network

  api:
    container_name: erist_opt-api
    build:
      cache_from:
        - erist_opt-image:nx-base
      context: ./
      dockerfile: ./apps/api/Dockerfile
    ports:
      - 3010:3010
    image: api:nx-prod
    restart: on-failure
    depends_on:
      # - db
      # - redis
      # - rabbitmq
      # - kafka
      # - minio
      - notifications-service
      - local-rmq
      - loki
      - elasticsearch
    environment:
      NODE_ENV: ${NODE_ENV}
      BUILD_FLAG: ${BUILD_FLAG}
      PORT: ${PORT}
      PG_HOST: db
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      DB_SYNC: ${DB_SYNC}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      RMQ_URL: ${RMQ_URL}
      RMQ_QUEUE: ${RMQ_QUEUE}
      RMQ_DEF_USER: ${RMQ_DEF_USER}
      RMQ_DEF_PASS: ${RMQ_DEF_PASS}
      RMQ_QUEUE_LOCAL_RMQ: ${RMQ_QUEUE_LOCAL_RMQ}
      RMQ_QUEUE_ORDER: ${RMQ_QUEUE_ORDER}
      SEND_EMAIL_TO: ${SEND_EMAIL_TO}
      SEND_EMAIL: ${SEND_EMAIL}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      JWT_ACCESS_TOKEN_PUBLIC_KEY: ${JWT_ACCESS_TOKEN_PUBLIC_KEY}
      JWT_ACCESS_TOKEN_PUBLIC_KEY_CUSTOMER: ${JWT_ACCESS_TOKEN_PUBLIC_KEY_CUSTOMER}
      JWT_TIME: ${JWT_TIME}
      LONG_JWT_TIME: ${LONG_JWT_TIME}
      JWT_TIME_CUSTOMER: ${JWT_TIME_CUSTOMER}
      LONG_JWT_TIME_CUSTOMER: ${LONG_JWT_TIME_CUSTOMER}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_EXTERNAL_HOST: ${MINIO_EXTERNAL_HOST}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      LOKI_HOST: ${LOKI_HOST}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE}
      DADATA_API_KEY: ${DADATA_API_KEY}
    networks:
      - erist_opt-network

  front:
    container_name: front
    build:
      args:
        - MONGODB_URI=${MONGODB_URI}
      context: ./
      dockerfile: ./apps/front/Dockerfile
    ports:
      - 3012:3012
    environment:
      NODE_ENV: 'production'
      API_ENDPOINT: ${GQL_API_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      PORT: 3012
      MONGODB_URI: ${MONGODB_URI}
    networks:
      - erist_opt-network
    restart: on-failure

  admin:
    container_name: admin
    build:
      context: ./
      dockerfile: ./apps/admin/Dockerfile
    ports:
      - 4200:4200
    environment:
      NODE_ENV: 'production'
    networks:
      - erist_opt-network
    restart: on-failure

volumes:
  elasticsearch-data:
    driver: local

networks:
  erist_opt-network:
    driver: bridge
