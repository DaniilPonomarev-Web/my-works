version: '3.8'
services:
  db:
    container_name: wcb-postgres
    build:
      context: .
      dockerfile: ./db/pg/Dockerfile.postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      TZ: Asia/Yekaterinburg
    volumes:
      - ./db/pg/web_clients.sql:/docker-entrypoint-initdb.d/web_clients-db-init.sql
    networks:
      - wcb-network
  redis:
    image: redis:7
    restart: always
    container_name: wcb-redis
    command: redis-server --requirepass ${REDIS_PASS}
    volumes:
      - ./docker-data/redis:/var/lib/redis
    ports:
      - 6380:6379
    networks:
      - wcb-network
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    container_name: wcb-rabbitmq
    volumes:
      - ./docker-data/rabbitmq:/var/lib/rabbitmq/mnesia/
      - ./db/rabbitMQ/init-rabbitMQ/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./db/rabbitMQ/init-rabbitMQ/conf.d:/etc/rabbitmq/conf.d:ro
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_DEF_USER}
      - RABBITMQ_DEFAULT_PASS=${RMQ_DEF_PASS}
    ports:
      - '127.0.0.1:5672:5672'
      - 15672:15672
    networks:
      - wcb-network

  grafana:
    container_name: wcb-grafana
    build:
      context: .
      dockerfile: ./grafana/Dockerfile.grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      REDIS_PASS: ${REDIS_PASS}
    depends_on:
      - prometheus
    networks:
      - wcb-network
  # loki:
  #   container_name: wcb-loki
  #   image: grafana/loki:latest
  #   ports:
  #     - 3100:3100
  #   command: -config.file=/etc/loki/local-config.yaml
  #   depends_on:
  #     - grafana
  #   networks:
  #     - wcb-network
  cadvisor:
    container_name: cadvisor-wcb
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    restart: unless-stopped
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - wcb-network
  prometheus:
    image: prom/prometheus:latest
    container_name: wcb-prometheus
    volumes:
      - ./prometheus.qa.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - wcb-network

  elasticsearch:
    container_name: elasticsearch-wcb
    image: elasticsearch:7.4.0
    platform: linux/amd64
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - wcb-network
    restart: on-failure
  kibana:
    container_name: kibana-wcb
    image: kibana:7.4.0
    platform: linux/amd64
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - wcb-network

  data-loader:
    container_name: 'data-loader'
    build:
      cache_from:
        - wcb-image:nx-base
      context: ./
      dockerfile: ./apps/data-loader/Dockerfile
    image: data-loader:nx-prod
    restart: on-failure
    environment:
      NODE_ENV: ${NODE_ENV}
      RMQ_URL: ${RMQ_URL}
      RMQ_QUEUE_DATA_LOADER: ${RMQ_QUEUE_DATA_LOADER}
      APIME_URI: ${APIME_URI}
      APIME_PASS: ${APIME_PASS}
    networks:
      - wcb-network

  graphql:
    container_name: wcb-gql
    build:
      cache_from:
        - wcb-image:nx-base
      context: ./
      dockerfile: ./apps/graphql/Dockerfile
    ports:
      - 3010:3010
    image: graphql:nx-prod
    restart: on-failure
    depends_on:
      - redis
      - grafana
      - prometheus
      - rabbitmq
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT_GQL: ${PORT_GQL}
      RMQ_URL: ${RMQ_URL}
      RMQ_QUEUE_GQL: ${RMQ_QUEUE_GQL}
      RMQ_QUEUE_DATA_LOADER: ${RMQ_QUEUE_DATA_LOADER}
      RMQ_QUEUE_JOURNALIZATION: ${RMQ_QUEUE_JOURNALIZATION}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_CLIENT_ID: ${KAFKA_CLIENT_ID}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      # LOKI_HOST: ${LOKI_HOST}
      # OPENSEARCHHOST: ${OPENSEARCHHOST}
      KEYCLOAK_GUARD: ${KEYCLOAK_GUARD}
      PLAYGROUND_GQL: ${PLAYGROUND_GQL}
      KEYCLOAK_HOST_PORT: ${KEYCLOAK_HOST_PORT}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
    networks:
      - wcb-network

  journalization:
    container_name: wcb-journalization
    build:
      cache_from:
        - wcb-image:nx-base
      context: ./
      dockerfile: ./apps/journalization/Dockerfile
    image: journalization:nx-prod
    restart: on-failure
    depends_on:
      - db
      - rabbitmq
      - elasticsearch
    environment:
      NODE_ENV: ${NODE_ENV}
      RMQ_URL: ${RMQ_URL}
      RMQ_QUEUE_JOURNALIZATION: ${RMQ_QUEUE_JOURNALIZATION}
      PG_HOST: db
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASS: ${PG_PASS}
      PG_DB: ${PG_DB}
      PG_LOG: ${PG_LOG}
      DB_SYNC: ${DB_SYNC}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE}
    networks:
      - wcb-network

volumes:
  elasticsearch-data:
    driver: local

networks:
  wcb-network:
    driver: bridge
